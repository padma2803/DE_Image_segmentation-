# Import all necessary packages
from skimage.color import rgb2gray
import numpy as np
import cv2
import matplotlib.pyplot as plt
from scipy import ndimage
from sklearn.cluster import KMeans

# To display plots inline in Jupyter Notebooks
%matplotlib inline

# Read the image
image = plt.imread('/content/sky.jpeg')
print(f"Original image shape: {image.shape}")
plt.imshow(image)
plt.title('Original Image')
plt.show()

# Convert the image to grayscale using OpenCV
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
plt.imshow(gray, cmap='gray')
plt.title('Grayscale Image (using OpenCV)')
plt.show()

# Binary segmentation based on mean pixel value
gray_r = gray.reshape(gray.shape[0] * gray.shape[1])
for i in range(gray_r.shape[0]):
    if gray_r[i] > gray_r.mean():
        gray_r[i] = 1
    else:
        gray_r[i] = 0

gray = gray_r.reshape(gray.shape[0], gray.shape[1])
plt.imshow(gray, cmap='gray')
plt.title('Binary Segmentation')
plt.show()

# Grayscale conversion using skimage and multi-level segmentation
gray = rgb2gray(image)
gray_r = gray.reshape(gray.shape[0] * gray.shape[1])

for i in range(gray_r.shape[0]):
    if gray_r[i] > gray_r.mean():
        gray_r[i] = 3
    elif gray_r[i] > 0.5:
        gray_r[i] = 2
    elif gray_r[i] > 0.25:
        gray_r[i] = 1
    else:
        gray_r[i] = 0

gray = gray_r.reshape(gray.shape[0], gray.shape[1])
plt.imshow(gray, cmap='gray')
plt.title('Multi-Level Segmentation')
plt.show()

# Sobel filters for edge detection
sobel_horizontal = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])
sobel_vertical = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])

print(sobel_horizontal, 'is a kernel for detecting horizontal edges')
print(sobel_vertical, 'is a kernel for detecting vertical edges')

out_h = ndimage.convolve(gray, sobel_horizontal, mode='reflect')
out_v = ndimage.convolve(gray, sobel_vertical, mode='reflect')

plt.imshow(out_h, cmap='gray')
plt.title('Horizontal Edges')
plt.show()

plt.imshow(out_v, cmap='gray')
plt.title('Vertical Edges')
plt.show()

# Laplacian filter for edge detection
kernel_laplace = np.array([[1, 1, 1], [1, -8, 1], [1, 1, 1]])
print(kernel_laplace, 'is a laplacian kernel')

out_l = ndimage.convolve(gray, kernel_laplace, mode='reflect')
plt.imshow(out_l, cmap='gray')
plt.title('Laplacian Edges')
plt.show()

# K-means clustering for color segmentation
pic = plt.imread('/content/sky.jpeg') / 255  # Normalize pixel values between 0 and 1
print(f"Normalized image shape: {pic.shape}")
plt.imshow(pic)
plt.title('Normalized Image')
plt.show()

pic_n = pic.reshape(pic.shape[0] * pic.shape[1], pic.shape[2])
print(f"Reshaped image for K-means: {pic_n.shape}")

kmeans = KMeans(n_clusters=5, random_state=0).fit(pic_n)
pic2show = kmeans.cluster_centers_[kmeans.labels_]
cluster_pic = pic2show.reshape(pic.shape[0], pic.shape[1], pic.shape[2])

plt.imshow(cluster_pic)
plt.title('K-means Clustered Image')
plt.show()
